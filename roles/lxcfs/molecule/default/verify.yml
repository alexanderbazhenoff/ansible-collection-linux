---

- name: Verify
  hosts: all
  gather_facts: True
  become: True
  become_method: sudo

  tasks:

    - name: "default >>> verify | Include default(s) for testing"
      ansible.builtin.include_vars:
        file: defaults/main.yml

    - name: "default >>> verify | Create container"   # noqa command-instead-of-module command-instead-of-shell
      ansible.builtin.shell: >-
        lxc-create -t download -n ubuntu-focal -- -d ubuntu -r focal -a amd64
        {% if (ansible_distribution == 'Debian' and ansible_distribution_major_version | int <= 9) or
        (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version | int <= 18) %}--no-validate{% endif %}
      register: container_create_results
      changed_when: "'You just created an' in container_create_results.stdout"

    # Workaround of possible apparmor error while trying to start nested container: 'Warning: unable to find a suitable
    # fs in /proc/mounts, is it mounted? No such file or directory - Error removing AppArmor namespace'
    - name: "default >>> verify | Remove apparmor profile from lxc container config(s)"
      ansible.builtin.lineinfile:
        path: /var/lib/lxc/ubuntu-focal/config
        regexp: '^lxc.apparmor.profile = generated'
        state: absent
      when: ansible_distribution == 'Debian'

    - name: "default >>> verify | Start container"
      ansible.builtin.command: lxc-start ubuntu-focal
      changed_when: True

    - name: "default >>> verify | Get container state"   # noqa risky-shell-pipe
      ansible.builtin.shell: lxc-ls -f | tail -1
      register: lxc_container_results
      changed_when: False

    - name: "default >>> verify | Make sure the container is running"
      ansible.builtin.assert:
        that:
          - lxc_container_results.stdout is defined and "'RUNNING' in lxc_container_results.stdout"
        fail_msg: >-
          Error. {% if not "'RUNNING' in lxc_container_results.stdout" %}Container is not running.{% endif %}
