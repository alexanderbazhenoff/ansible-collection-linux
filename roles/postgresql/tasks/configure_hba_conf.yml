---

- name: "configure hba conf | Include get daemon name tasks"
  ansible.builtin.include_tasks: includes_misc/get_daemon_name.yml

- name: "configure hba conf | Get pg_hba.conf path with standard command"
  ansible.builtin.shell: "{{ hba_conf_path_standard_cmd }}"   # noqa command-instead-of-shell
  register: hba_conf_path_results
  changed_when: false

- name: "configure hba conf | Get pg_hba.conf path alternative way"
  ansible.builtin.shell: "{{ hba_conf_path_alternative_cmd }}"   # noqa command-instead-of-shell
  register: hba_conf_path_retry_results
  changed_when: false
  when: not ("'pg_hba.conf' in hba_conf_path_results.stdout") or (hba_conf_path_results.stderr is defined and
    hba_conf_path_results.stderr | length > 0)

- name: "configure hba conf | Set fact for pg_hba.conf path results with alternative command"
  ansible.builtin.set_fact:
    hba_conf_path: >-
      {% if not ("'pg_hba.conf' in hba_conf_path_results.stdout") or (hba_conf_path_results.stderr is defined and
      hba_conf_path_results.stderr | length > 0) %}{{ hba_conf_path_retry_results.stdout }}{% else -%}
      {{ hba_conf_path_results.stdout }}{% endif -%}

- name: "configure hba conf | Apply regex changes to pg_hba.conf file"
  ansible.builtin.lineinfile:
    dest: "{{ hba_conf_path }}"
    regexp: "#?.?{{ item | regex_replace(' {1,}', ' {1,}') }}"
    insertafter: "#?.?{{ item | regex_replace(' {1,}', ' {1,}') }}"
    line: "{{ item }}"
  when: pg_conf_content_mode == 'regex' and item is not none and item | length > 0
  with_items:
    - "{{ hba_conf_content.split('\n') | list | default([]) }}"
  notify:
    - Postgresql restart

- name: "configure hba conf | Apply block changes to pg_hba.conf file"
  ansible.builtin.blockinfile:
    path: "{{ hba_conf_path }}"
    block: "{{ hba_conf_content }}"
  when: pg_conf_content_mode == 'block' and hba_conf_content is defined and hba_conf_content is not none and
    hba_conf_content | length > 0

- name: "configure hba conf | Replace pg_hba.conf file with template"
  ansible.builtin.template:
    src: "{{ pg_conf_content_mode }}"
    dest: "{{ hba_conf_path }}"
    owner: "{{ postgresql_become_user }}"
    group: "{{ postgresql_become_user }}"
    mode: 0640
    backup: true
  when: pg_conf_content_mode != 'regex' and pg_conf_content_mode != 'block'
