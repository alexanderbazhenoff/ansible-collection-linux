---

- name: "pre-requirements | Include check firewall {{ ansible_os_family | lower }} tasks"
  ansible.builtin.include_tasks: includes_misc/check_firewall_{{ ansible_os_family | lower }}.yml
  when: not clean_install and ansible_os_family != 'Alpine'

- name: "pre-requirements | Set required packages list"
  ansible.builtin.set_fact:
    packages_to_install:
      - { package: ca-certificates }
      - { package: tzdata }
      - { package: "{% if ansible_os_family == 'Debian' %}apt-transport-https{% endif %}" }
      - { package: "{% if ansible_os_family == 'Debian' %}gnupg2{% endif %}" }
      - { package: "{% if ansible_os_family == 'Debian' %}software-properties-common{% endif %}" }
      - { package: "{% if ansible_os_family == 'RedHat' and ansible_facts.selinux.status is defined and
        ansible_facts.selinux.status == 'enabled' %}{{ (ansible_python.version.major == 3) |
        ternary('python3-libselinux', 'libselinux-python') }}{% endif %}" }
      - { package: "{% if ansible_os_family == 'RedHat' and ansible_facts.selinux.status is defined and
        ansible_facts.selinux.status == 'enabled' %}policycoreutils-python{{ (ansible_python.version.major == 3) |
        ternary('3', '') }}{% endif %}"}
    firewall_state: True

- name: "pre-requirements | Ensure required packages are installed"
  ansible.builtin.include_tasks: pkg_management/install_{{ ansible_pkg_mgr }}.yml

- name: "pre-requirements | Include add repo {{ ansible_os_family | lower }} tasks"
  ansible.builtin.include_tasks: add_pgdg_repo_{{ ansible_os_family | lower }}.yml
  when: ansible_os_family != 'Alpine'

# (Workaround of initdb timezone error of PostgreSQL (e.g. v14) mostly for Alpine, but also performing on Debian family)
- name: "pre-requirements | Check /etc/timezone exists"
  ansible.builtin.find:
    paths: /etc/timezone
  register: etc_timezone_file_found
  when: ansible_os_family | regex_search('Alpine|Debian')

- name: "pre-requirements | Place a new timezone data to /etc/localtime"
  ansible.builtin.copy:
    src: /usr/share/zoneinfo/{{ postgresql_default_timezone }}
    dest: /etc/localtime
    remote_src: True
    mode: 0644
  when: etc_timezone_file_found.matched is defined and etc_timezone_file_found.matched == 0

- name: "pre-requirements | Set timezone in /etc/timezone when not exists"
  ansible.builtin.copy:
    content: "{{ postgresql_default_timezone }}"
    dest: /etc/timezone
    mode: 0644
  when: etc_timezone_file_found.matched is defined and etc_timezone_file_found.matched == 0
