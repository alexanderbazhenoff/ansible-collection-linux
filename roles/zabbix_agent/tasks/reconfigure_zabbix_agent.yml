---

# Changes zabbix-agent config: re-configure, detect services and add related hostMetadata hashes:
# - 1. ff<platform_or_hardware_type> is for bare-metal, containerization or virtualization subscription:
#      bare-metal server: ff6e6f6e65
#      kvm: ff6b766d
#      lxc: ff6c7863
#      docker: ff646f636b6572
#   etc...
# - 2. ee<hardware_feature_or_vendor> is for hardware features or vendor names (e.g., IPMI, server vendor):
#      IPMI: ee69706d69
#      Vendor 'Supermicro': ee53757065726d6963726f
#      Vendor 'Advantech': ee416476616e74656368
#   etc...
# - 3. dd<environment_name> is for runtime environments, binaries, daemons, languages (e.g., java, mysql):
#      check hm_* variables


# Check/install required packages.

- name: "reconfigure zabbix agents | Install required packages"
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  register: install_package_results
  until: install_package_results is succeeded
  retries: 5
  delay: 5
  when: item | length > 0
  with_items:
    - "{{ required_packages | json_query(ansible_os_family | lower) }}"

# Zabbix's checks and init.

- name: "reconfigure zabbix agents | Check zabbix agent version"
  ansible.builtin.stat:
    path: /etc/zabbix/zabbix_agent2.conf
  register: stat_result

- name: "reconfigure zabbix agents | Change conf and daemon names (when agent v2 detected)"
  ansible.builtin.set_fact:
    zabbix_agent_conf_name: zabbix_agent2
    zabbix_agent_daemon_name: zabbix-agent2
  when: stat_result.stat.exists

- name: "reconfigure zabbix agents | Check zabbix server installed"
  ansible.builtin.stat:
    path: /etc/zabbix/zabbix_server.conf
  register: stat2_result

- name: "reconfigure zabbix agents | Append localhost to passive/active zabbix server(s)"
  ansible.builtin.set_fact:
    zabbix_servers_passive: "{{ zabbix_servers_passive }},127.0.0.1"
    zabbix_servers_active: "{{ zabbix_servers_active }},127.0.0.1:10051"
  when: stat2_result.stat.exists

- name: "reconfigure zabbix agents | Allow 'sudonopass' group to have passwordless sudo"
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: "^zabbix"
    line: "zabbix   ALL=(ALL)   NOPASSWD: ALL"
    validate: visudo -cf %s

- name: "reconfigure zabbix agents | Set selinux permissive for zabbix_agent_t (Redhat)"
  selinux_permissive:
    name: zabbix_agent_t
    permissive: True
  when: ansible_selinux is defined and ansible_selinux and ansible_selinux.status == 'enabled' and
    ansible_os_family == "RedHat" and ansible_distribution_major_version | int >= 7

- name: "reconfigure zabbix agents | Set selinux booleans to allow zabbix user networking and sudo (Redhat)"
  ansible.builtin.seboolean:
    name: "{{ item }}"
    state: True
    persistent: True
  with_items:
    - zabbix_can_network
    - zabbix_run_sudo
  ignore_errors: True    # noqa ignore-errors
  when: ansible_selinux is defined and ansible_selinux and ansible_selinux.status == 'enabled' and
    ansible_os_family == "RedHat" and ansible_distribution_major_version | int >= 7

# Services/platform discovery section: hardware, ipmi, vendor

- name: "reconfigure zabbix agents | Search systemd-detect-virt in the system"
  ansible.builtin.stat:
    path: /usr/bin/systemd-detect-virt
  register: systemd_detect_virt_package

- name: "reconfigure zabbix agents | Detect virtualization/containerization by systemd"   # noqa risky-shell-pipe
  ansible.builtin.shell: systemd-detect-virt | tr -d '\n' | xxd -ps -c 200
  args:
    executable: /bin/bash
  register: detect_virt
  when: systemd_detect_virt_package.stat.exists

- name: "reconfigure zabbix agents | Detect virtualization/containerization by lscpu"   # noqa risky-shell-pipe
  ansible.builtin.shell: |
    lscpu | grep "Hypervisor vendor:" | awk '{print tolower($3)}' | tr -d '\n' | xxd -ps -c 200 || true
  args:
    executable: /bin/bash
  register: detect_virt_lscpu
  when: not systemd_detect_virt_package.stat.exists

- name: "reconfigure zabbix agents | Set fact for virtualization/containerization (with lscpu)"
  ansible.builtin.set_fact:
    detect_virt: "{{ detect_virt_lscpu }}"
  when: not systemd_detect_virt_package.stat.exists

- name: "reconfigure zabbix agents | Detect virtualization/containerization debug"
  ansible.builtin.debug:
    var: detect_virt
  when: debug_mode

- name: "reconfigure zabbix agents | Set fact for virtualization/containerization detection"
  ansible.builtin.set_fact:
    zabbix_host_metadata: "{{ zabbix_host_metadata }} ff{{ detect_virt.stdout }}"
  when: detect_virt.stdout is defined

- name: "reconfigure zabbix agents | Install bare-metal related packages"
  ansible.builtin.package:
    state: present
    name: "{{ item }}"
  register: install_package_results
  until: install_package_results is succeeded
  retries: 5
  delay: 5
  with_items:
    - dmidecode
    - ipmitool
    - smartmontools
  when: detect_virt.stdout == "6e6f6e65"

- name: "reconfigure zabbix agents | Detect IPMI interface"
  ansible.builtin.shell: |
    set -e -o pipefail
    ipmitool mc info &> /dev/zero && echo "ok" || echo "none"
  args:
    executable: /bin/bash
  register: detect_ipmi
  changed_when: detect_ipmi.stdout

- name: "reconfigure zabbix agents | Detect IPMI debug"
  ansible.builtin.debug:
    var: detect_ipmi
  when: debug_mode

- name: "reconfigure zabbix agents | Detect vendor via IPMI tool"
  ansible.builtin.shell: |
    set -e -o pipefail
    ipmitool mc info | grep 'Manufacturer Name' | awk '{print $4$5$6}' | tr -d '\n' | xxd -ps -c 200
  args:
    executable: /bin/bash
  register: ipmi_vendor
  when: detect_virt.stdout == "6e6f6e65" and detect_ipmi.stdout == "ok"

- name: "reconfigure zabbix agents | Set fact for IPMI and vendor"
  ansible.builtin.set_fact:
    zabbix_host_metadata: "{{ zabbix_host_metadata }} ee69706d69 ee{{ ipmi_vendor.stdout }}"
  when: detect_virt.stdout == "6e6f6e65" and detect_ipmi.stdout == "ok" and detect_virt.stdout | length > 0

# Check binaries on the system.

- name: "reconfigure zabbix agents | Check installed binaries (whereis)"
  ansible.builtin.shell: |
    set -e -o pipefail
    if [[ $(whereis {{ item.name }} | awk '{print $2}') ]]; then printf '{{ item.hash }}'; fi
  args:
    executable: /bin/bash
  with_items:
    - "{{ binaries_tag_hashes }}"
  register: check_binaries
  changed_when: check_binaries.stdout

- name: "reconfigure zabbix agents | Check installed binaries debug"
  ansible.builtin.debug:
    var: check_binaries.results
  when: debug_mode

- name: "reconfigure zabbix agents | Appending hash tags of binaries hashes to host zabbix_host_metadata"
  ansible.builtin.set_fact:
    zabbix_host_metadata: "{{ zabbix_host_metadata }} {{ item.stdout }}"
  with_items:
    - "{{ check_binaries.results }}"
  when: item.rc == 0 and item.stdout is defined and item.stdout | length > 0

# Check daemons on the system.

- name: "reconfigure zabbix agents | Include check systemd tasks"
  ansible.builtin.include_tasks: check_systemd_presents.yml

- name: "reconfigure zabbix agents | Check enabled daemons via systemctl"
  ansible.builtin.shell: systemctl is-enabled {{ item.name }} 2> /dev/null || true   # noqa command-instead-of-module
  args:
    executable: /bin/bash
  with_items:
    - "{{ daemon_tag_hashes }}"
  register: services_enabled
  changed_when: services_enabled.stdout is defined and services_enabled.stdout == 'enabled'
  when: systemctl_check.stdout | length > 0

- name: "reconfigure zabbix agents | Check enabled daemons via openrc"
  ansible.builtin.shell: rc-service {{ item.name }} status 2> /dev/null || true   # noqa command-instead-of-shell
  args:
    executable: /bin/bash
  with_items:
    - "{{ daemon_tag_hashes }}"
  register: services_enabled
  changed_when: services_enabled.stdout is defined and services_enabled.stdout | regex_search('started')
  when: systemctl_check.stdout | length == 0

- name: "reconfigure zabbix agents | Check enabled daemons via systemctl debug"
  ansible.builtin.debug:
    var: services_enabled.results
  when: debug_mode

- name: "reconfigure zabbix agents | Getting hash tags of existing services names"   # noqa: no-handler
  ansible.builtin.shell: |
    set -e -o pipefail
    echo "{{ item.item.tag }}" | tr -d '\n' | xxd -ps -c 200
  args:
    executable: /bin/bash
  register: services_hashes
  changed_when: False
  with_items:
    - "{{ services_enabled.results }}"
  when: item.changed

- name: "reconfigure zabbix agents | Getting hash tags of existing services names debug"
  ansible.builtin.debug:
    var: services_hashes
  when: debug_mode

- name: "reconfigure zabbix agents | Appending hash tags of existing services hashes to host's zabbix_host_metadata"
  ansible.builtin.set_fact:
    zabbix_host_metadata: "{{ zabbix_host_metadata }} dd{{ item.stdout }}"
  with_items:
    - "{{ services_hashes.results }}"
  when: item.stdout is defined

# Write zabbix-agent config and restart daemon.

- name: "reconfigure zabbix agents | Check zabbix-agent version via dpkg (Debian family)"
  ansible.builtin.shell: >-
    set -e -o pipefail;
    {% if ansible_os_family == 'Debian' -%}
    dpkg -s {{ zabbix_agent_daemon_name }} | grep "^Version" | sed -re "s/^.*:([0-9]+\.[0-9]+).*/\1/"
    {% elif ansible_os_family == 'RedHat' -%}
    rpm -q {{ zabbix_agent_daemon_name }} | cut -f3 -d'-' | cut -f1,2 -d'.'
    {% elif ansible_os_family == 'Archlinux' -%}
    pacman -Q | grep zabbix-agent | awk '{print $2}' | cut -f1 -d'-' | cut -f1,2 -d'.'
    {% elif ansible_os_family == 'Alpine' -%}
    apk info -eL {{ zabbix_agent_daemon_name }} | head -1 | awk -F. '{print $1"."$2}' |
    sed "s/{{ zabbix_agent_daemon_name }}-//"{% endif %}
  args:
    executable: /bin/bash
  register: detected_zabbix_release
  changed_when: False

- name: "reconfigure zabbix agents | Zabbix release debug"
  ansible.builtin.debug:
    var: detected_zabbix_release
  when: debug_mode

- name: "reconfigure zabbix agents | Change hostMetadata in zabbix configs (if some services/platforms detected)"
  ansible.builtin.lineinfile:
    dest: /etc/zabbix/{{ zabbix_agent_conf_name }}.conf
    regexp: "{{ item.var }}="
    line: "{{ item.var }}={{ item.value }}"
  with_items:
    - { var: "HostMetadata", value: "{{ zabbix_host_metadata }}" }
  when: detected_zabbix_release.stdout is defined and zabbix_host_metadata != "Linux" and
    detected_zabbix_release.stdout | int >= 2.2

- name: "reconfigure zabbix agents | Set EnableRemoteCommands/AllowKey line in zabbix configs"
  ansible.builtin.set_fact:
    remote_cmd_key: AllowKey
    remote_cmd_value: system.run[*]
  when: detected_zabbix_release.stdout is defined and detected_zabbix_release.stdout | int >= 5.0

- name: "reconfigure zabbix agents | Change user parameters in configs"
  ansible.builtin.lineinfile:
    dest: /etc/zabbix/{{ zabbix_agent_conf_name }}.conf
    regexp: "{{ item.var }}"
    line: "{{ item.var }},{{ item.value }}"
  with_items:
    - { var: "UserParameter=hostmetadata", value: "echo '{{ zabbix_host_metadata }}'"}
  notify:
    - restart zabbix-agent svc
    - restart zabbix-agent sysv
  when: detected_zabbix_release.stdout is defined and detected_zabbix_release.stdout | int >= 2.2

- name: "reconfigure zabbix agents | Check AllowRoot parameter exists in the config"
  ansible.builtin.shell: grep -Fq "# AllowRoot=" "/etc/zabbix/{{ zabbix_agent_conf_name }}.conf" || true
  args:
    executable: /bin/sh
  register: grep_allow_root_line_results
  changed_when: False

- name: "reconfigure zabbix agents | Change AllowRoot parameter in config (if exists)"
  ansible.builtin.lineinfile:
    dest: /etc/zabbix/{{ zabbix_agent_conf_name }}.conf
    regexp: "{{ item.var }}="
    line: "{{ item.var }}={{ item.value }}"
    insertafter: "{{ item.insert_after }}"
    backrefs: True
  with_items:
    - { var: "AllowRoot", insert_after: "# AllowRoot=0", value: "1" }
  notify:
    - restart zabbix-agent svc
    - restart zabbix-agent sysv
  when: detected_zabbix_release.stdout is defined and detected_zabbix_release.stdout | int >= 2.2 and
    grep_allow_root_line_results.stdout is defined and grep_allow_root_line_results.stdout | length > 0

- name: "reconfigure zabbix agents | Check zabbix_agent_conf includes directory"
  ansible.builtin.stat:
    path: /etc/zabbix/{{ zabbix_agent_conf_name }}.d
  register: conf_incl_folder

- name: "reconfigure zabbix agents | Create zabbix_agent_conf includes directory"
  ansible.builtin.file:
    path: /etc/zabbix/{{ zabbix_agent_conf_name }}.d
    state: directory
    mode: 0755
    group: root
    owner: root
  when: not conf_incl_folder.stat.exists

- name: "reconfigure zabbix agents | Register to delete include files inside of zabbix_agent's config directory"
  ansible.builtin.find:
    path: /etc/zabbix/{{ zabbix_agent_conf_name }}.d/
    file_type: any
    hidden: True
  register: zabbix_agent_confd_files_to_delete
  when: conf_with_dir_clean

- name: "reconfigure zabbix agents | Clean-up zabbix_agent_conf includes directory"
  ansible.builtin.file:
    state: absent
    path: "{{ item.path }}"
  with_items:
    - "{{ zabbix_agent_confd_files_to_delete.files }}"
  when: conf_with_dir_clean

- name: "reconfigure zabbix agents | Change lines in configs"
  ansible.builtin.lineinfile:
    dest: /etc/zabbix/{{ zabbix_agent_conf_name }}.conf
    regexp: "{{ item.var }}="
    line: "{{ item.var }}={{ item.value }}"
  with_items:
    - { var: "ServerActive", value: "{{ zabbix_servers_passive }}" }
    - { var: "Server", value: "{{ zabbix_servers_passive }}" }
    - { var: "RefreshActiveChecks", value: "60" }
    - { var: "Timeout", value: "15" }
    - { var: "Hostname", value: "{{ ansible_hostname }}" }
    - { var: "HostMetadataItem", value: "system.uname" }
    - { var: "{{ remote_cmd_key }}", value: "{{ remote_cmd_value }}" }
    - { var: "{{ logfile_size_key }}", value: "{{ logfile_size_value }}" }
    - { var: "Include", value: "/etc/zabbix/{{ zabbix_agent_conf_name }}.d/*.conf" }
  notify:
    - restart zabbix-agent svc
    - restart zabbix-agent sysv
  when: detected_zabbix_release.stdout is defined and detected_zabbix_release.stdout | int >= 2.2
